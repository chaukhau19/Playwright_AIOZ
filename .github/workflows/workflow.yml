name: Playwright CI-CD 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '40 22 * * *' # Runs at 10:40 PM UTC daily

env:
  DEPLOY_ENV: 'Local' # Thay đổi giá trị này thành 'Test', 'Staging', 'Dev', hoặc 'Local' tùy theo nhu cầu

jobs:
  # Job for PLAYWRIGHT_AIOZ
  build-and-test-playwright:
    runs-on: windows-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Dependencies
      - name: Install Dependencies
        working-directory: ./PLAYWRIGHT_AIOZ
        run: |
          yarn install
          npm install -g yarn
          yarn playwright install
          yarn add @playwright/test@latest @tenkeylabs/dappwright

      # Check versions
      - name: Check versions
        run: |
          node -v
          npm -v
          yarn -v
          playwright --version
          npm playwright --version
          yarn playwright --version

      # List directory contents
      - name: List directory contents
        working-directory: ./PLAYWRIGHT_AIOZ
        run: |
          dir

      # Run Playwright tests
      - name: Run Playwright tests for PLAYWRIGHT_AIOZ
        working-directory: ./PLAYWRIGHT_AIOZ
        run: |
          yarn test:AllFixed --workers=1

      # Archive test results
      - name: Archive test results for PLAYWRIGHT_AIOZ
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-playwright_aioz
          path: ./PLAYWRIGHT_AIOZ/playwright-report/

      # Deploy to Test Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Test Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Test' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.TEST_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.TEST_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Staging Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Staging Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Staging' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.STAGING_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Dev Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Dev Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Dev' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.DEV_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEV_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Local Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Local Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Local' && success()
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Add your local deployment steps here
          echo "Deploying to local environment for PLAYWRIGHT_AIOZ"
          echo "DEPLOY_HOST: $env:DEPLOY_HOST"
          echo "DEPLOY_USER: $env:DEPLOY_USER"
