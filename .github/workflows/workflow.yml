name: Playwright CI-CD 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '40 22 * * *' # Runs at 10:40 PM UTC daily

env:
  DEPLOY_ENV: 'Local' 

jobs:
  build-and-test-playwright:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        # working-directory: ./PLAYWRIGHT_AIOZ
        run: |
          npm install -g yarn
          yarn install
          npx playwright install --with-deps
          yarn add @playwright/test@latest @tenkeylabs/dappwright

      - name: Check versions
        run: |
          node -v
          npm -v
          yarn -v
          npx playwright --version

      - name: List directory contents
        # working-directory: ./PLAYWRIGHT_AIOZ
        run: dir

      - name: Check & Rename Playwright Chromium
        run: |
          echo "üîç Checking Playwright Chromium path..."
          
          # L·∫•y phi√™n b·∫£n Chromium
          CHROMIUM_VERSION=$(npx playwright show-browser chromium | awk -F '/' '{print $NF}')
          CHROMIUM_PATH=$(npx playwright show-browser chromium)
          
          echo "Detected Chromium Version: $CHROMIUM_VERSION"
          echo "Chromium Path: $CHROMIUM_PATH"

          # Ki·ªÉm tra n·∫øu l√† chromium-1155 th√¨ ƒë·ªïi t√™n th√†nh chromium-1148
          if [[ "$CHROMIUM_VERSION" == "chromium-1155" ]]; then
            echo "üîÑ Renaming Chromium-1155 to Chromium-1148..."
            mv "$CHROMIUM_PATH" "$(dirname "$CHROMIUM_PATH")/chromium-1148"
            echo "‚úÖ Rename completed!"
          else
            echo "‚ö†Ô∏è Chromium version is not 1155, no changes made."
          fi

      - name: Run Playwright tests
        # working-directory: ./PLAYWRIGHT_AIOZ
        run: yarn test:AllFixed --workers=1

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-playwright_aioz
          path: ./playwright-report/

      # Deploy to Test Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Test Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Test' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.TEST_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.TEST_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Staging Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Staging Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Staging' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.STAGING_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Dev Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Dev Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Dev' && success()
        shell: pwsh
        env:
          DEPLOY_HOST: ${{ secrets.DEV_DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEV_DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if (-not (Test-Path -Path "$env:USERPROFILE/.ssh")) {
            New-Item -Path "$env:USERPROFILE/.ssh" -ItemType Directory
          }
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE/.ssh/id_rsa" -Encoding ascii
          icacls "$env:USERPROFILE/.ssh/id_rsa" /inheritance:r
          icacls "$env:USERPROFILE/.ssh/id_rsa" /grant:r "${env:USERNAME}:(R,W)"
          ssh-keyscan -H $env:DEPLOY_HOST | Out-File -FilePath "$env:USERPROFILE/.ssh/known_hosts" -Append
          ssh -i "$env:USERPROFILE/.ssh/id_rsa" -o StrictHostKeyChecking=no $env:DEPLOY_USER@$env:DEPLOY_HOST "cd $env:GITHUB_WORKSPACE/PLAYWRIGHT_AIOZ && git pull origin main && yarn install && yarn build"

      # Deploy to Local Environment for PLAYWRIGHT_AIOZ
      - name: Deploy to Local Environment for PLAYWRIGHT_AIOZ
        if: env.DEPLOY_ENV == 'Local' && success()
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Add your local deployment steps here
          echo "Deploying to local environment for PLAYWRIGHT_AIOZ"
          echo "DEPLOY_HOST: $env:DEPLOY_HOST"
          echo "DEPLOY_USER: $env:DEPLOY_USER"
